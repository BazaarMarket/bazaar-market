{ parameter
    (or (or (nat %bid) (nat %cancel))
        (or (pair %configure
               (mutez %opening_price)
               (pair (mutez %min_raise)
                     (pair (nat %round_time)
                           (pair (list %asset
                                    (pair (address %fa2_address) (list %fa2_batch (pair (nat %token_id) (nat %amount)))))
                                 (pair (nat %auction_time) (timestamp %start_time))))))
            (nat %resolve))) ;
  storage
    (pair (nat %current_id)
          (pair (nat %max_auction_time)
                (pair (nat %max_config_to_start_time)
                      (big_map %auctions
                         nat
                         (pair (address %seller)
                               (pair (mutez %current_bid)
                                     (pair (timestamp %start_time)
                                           (pair (timestamp %last_bid_time)
                                                 (pair (int %round_time)
                                                       (pair (list %asset
                                                                (pair (address %fa2_address) (list %fa2_batch (pair (nat %token_id) (nat %amount)))))
                                                             (pair (mutez %min_raise) (pair (int %auction_time) (address %highest_bidder))))))))))))) ;
  code { LAMBDA
           (pair (pair (list (pair address (list (pair nat nat)))) address) address)
           (list operation)
           { DUP ;
             CAR ;
             CAR ;
             MAP { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CDR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CDR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   PAIR ;
                   PAIR ;
                   DUP ;
                   CAR ;
                   CAR ;
                   MAP { SWAP ; DUP ; DUG 2 ; CDR ; PAIR } ;
                   NIL (pair address (list (pair address (pair nat nat)))) ;
                   SWAP ;
                   DIG 2 ;
                   CAR ;
                   CDR ;
                   PAIR ;
                   CONS ;
                   SWAP ;
                   CAR ;
                   CONTRACT %transfer
                     (list (pair (address %from_)
                                 (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                   IF_NONE { PUSH string "Invalid FA2 Address" ; FAILWITH } {} ;
                   PUSH mutez 0 ;
                   DIG 2 ;
                   TRANSFER_TOKENS } ;
             SWAP ;
             DROP } ;
         LAMBDA
           (pair nat
                 (pair nat
                       (pair nat
                             (pair nat
                                   (big_map
                                      nat
                                      (pair address
                                            (pair mutez
                                                  (pair timestamp
                                                        (pair timestamp
                                                              (pair int (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair int address)))))))))))))
           (pair address
                 (pair mutez
                       (pair timestamp
                             (pair timestamp
                                   (pair int (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair int address))))))))
           { DUP ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             SWAP ;
             CAR ;
             GET ;
             IF_NONE { PUSH string "ASSET DOES NOT EXIST" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract unit)
           { CONTRACT unit ; IF_NONE { PUSH string "" ; FAILWITH } {} } ;
         LAMBDA
           (pair address
                 (pair mutez
                       (pair timestamp
                             (pair timestamp
                                   (pair int (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair int address))))))))
           bool
           { DUP ;
             CDR ;
             CDR ;
             CAR ;
             NOW ;
             COMPARE ;
             LE ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             CDR ;
             CDR ;
             CAR ;
             ADD ;
             NOW ;
             COMPARE ;
             LE ;
             OR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CAR ;
             DIG 2 ;
             CDR ;
             CDR ;
             CAR ;
             ADD ;
             NOW ;
             COMPARE ;
             LE ;
             AND } ;
         LAMBDA
           (pair address
                 (pair mutez
                       (pair timestamp
                             (pair timestamp
                                   (pair int (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair int address))))))))
           bool
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             COMPARE ;
             EQ } ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CDR ;
         DIG 6 ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { DIG 6 ;
                 DROP ;
                 SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 LT ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 AND ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 ADD ;
                 AMOUNT ;
                 COMPARE ;
                 GE ;
                 OR ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 IF { DUP ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      DIG 4 ;
                      SWAP ;
                      EXEC ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CDR ;
                      CAR ;
                      UNIT ;
                      TRANSFER_TOKENS ;
                      NIL operation ;
                      SWAP ;
                      CONS }
                    { DIG 3 ; DROP ; NIL operation } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 AMOUNT ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 SENDER ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 NOW ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 DIG 3 ;
                 UPDATE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 PAIR }
               { SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 SELF ;
                 ADDRESS ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 IF { SWAP ;
                      DUP ;
                      DUG 2 ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      CDR ;
                      DIG 5 ;
                      SWAP ;
                      EXEC ;
                      DIG 2 ;
                      CDR ;
                      CAR ;
                      UNIT ;
                      TRANSFER_TOKENS ;
                      CONS }
                    { SWAP ; DROP ; DIG 3 ; DROP } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 NONE (pair address
                            (pair mutez
                                  (pair timestamp
                                        (pair timestamp
                                              (pair int (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair int address)))))))) ;
                 SWAP ;
                 UPDATE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 NOW ;
                 SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 INT ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 ADD ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH nat 0 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 GT ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 COMPARE ;
                 GT ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SENDER ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 INT ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 INT ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 PUSH mutez 0 ;
                 PAIR ;
                 SENDER ;
                 PAIR ;
                 SELF ;
                 ADDRESS ;
                 SENDER ;
                 DIG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 SOME ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 UPDATE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PUSH nat 1 ;
                 DIG 3 ;
                 CAR ;
                 ADD ;
                 PAIR ;
                 SWAP ;
                 PAIR }
               { SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 NOT ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 SELF ;
                 ADDRESS ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 IF { SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      DIG 5 ;
                      SWAP ;
                      EXEC ;
                      DIG 2 ;
                      CDR ;
                      CAR ;
                      UNIT ;
                      TRANSFER_TOKENS ;
                      CONS }
                    { SWAP ; DROP ; DIG 3 ; DROP } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 NONE (pair address
                            (pair mutez
                                  (pair timestamp
                                        (pair timestamp
                                              (pair int (pair (list (pair address (list (pair nat nat)))) (pair mutez (pair int address)))))))) ;
                 SWAP ;
                 UPDATE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 PAIR } } } }

